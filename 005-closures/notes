011 - Power of Closure
Slide01
-------
The power of Closure

Our functions get 'memories' - once memoize

Advanced: we can implement the module pattern in JavaScript

010 - Q&A - Shared References

009 - Closure Exercise, Part 4
-If you return a function from a function to a different variable, it is creating two different function. It's not referencing to a same function

008 - Q&A - Garbage Collection
-To destroy the 'closure' of a function, we just need to reassign the label to that function to a new value

007 - Q&A - Lexical Scope
-The function has a hidden property: [[scope]], a special bond (closure)
-The only way to access the 'backpack' data is to call the function
-The 'backpack' is usually called 'closure' or 'close over variable environment' or 'lexical scope'
-When a function is defined, it gets a [[scope]] property that references the Local Memory/Variable Environment in which it has been defined

Slide01
-------
What happens if we execute myNewFunction again?

function outer() {
  let counter = 0;
  function incrementCounter() {
    counter++;
  }
  return incrementCounter;
}

Slide02
-------
JavaScript static/lexical scoping

This is what it means when we say JavaScript is lexically or statically scoped

Our lexical scope (the available live data when our function was defined) is what determines our available variables and prioritization at function execution, not where out function is called

006 - Closure Exercise, Part 3
-Explaining the code line by line

005 - Closure Exercise, Part 2
-Explaining the code line by line

004 - Closure Exercise, Part 1
Slide01
-------
Calling a function in the same scope as it was defined

function outer() {
  let counter = 0;
  function incrementCounter() {
    counter++;
  }
  incrementCounter;
}

outer();

Where you define your functions determines what variables your function have access to when you call the function

Slide02
-------
But what if we cal our function outside of where it was defined?

function outer() {
  let counter = 0;
  function incrementCounter() {
    counter++;
  }
}

outer();

incrementCounter();

What happens here?

Slide03
-------
There is a way to run a function outside where it was defined - return the function and assign it to a new variable

function outer() {
  let counter = 0;
  function incrementCounter() {
    counter++;
  }
  return incrementCounter;
}

var myNewFunction = Outer(); // myNewFunction = incrementCounter

003 - Q&A and Pair Programming
-When we return a function that is being defined in another function we get a bonus


002 - Deconstructing Example
-Reviewing the code line by line


Slide01
-------
We just saw that functions can be returned from other functions in JavaScript

function instructionGenerator() {
  function mulplyBy2 (num) {
    return num*2;
  }
  return mulplyBy2;
}

let generatedFuc = instructionGenerator();

How can we run/mulplyBy2 now?

001 - Introducing Closure
Slide01
-------
When our functions get called, we create a live store of data (local memory / variable environment/state) for that function's execution context.

When the function finishes executing, its local memory is deleted (except the returned value)

But what if our functions could hold on to live data/state between executions?

This would let our function definitions have an associated cache/persistent memory

But it starts with returning us a function from another function
